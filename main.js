(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const t=function(){function t(e){var n=e.baseUrl,o=e.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=n,this._headers=o}var n,o;return n=t,(o=[{key:"_addCommonFetchForAllApis",value:function(e,t){return fetch(e,t).then((function(e){return e.ok?e.json():Promise.reject("Возникла ошибка: ".concat(e.status))}))}},{key:"getInitialCards",value:function(){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers})}},{key:"addNewCard",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link,id:e._id})})}},{key:"deleteCard",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/cards/").concat(e._id),{method:"DELETE",headers:this._headers,body:JSON.stringify()})}},{key:"addLikeCard",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"PUT",headers:this._headers,body:JSON.stringify()})}},{key:"deleteLikeCard",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/cards/likes/").concat(e._id),{method:"DELETE",headers:this._headers,body:JSON.stringify()})}},{key:"getUserInfoAbout",value:function(){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers})}},{key:"changeInfo",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}},{key:"changeUserAvatar",value:function(e){return this._addCommonFetchForAllApis("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}}])&&e(n.prototype,o),t}();function n(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const o=function(){function e(t,n,o){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n.data.name,this._link=n.data.link,this._cardLikes=n.data.likes,this._ownerId=n.data.owner,this._handleCardClick=n.handleCardClick,this._handleLikeClick=n.handleLikeClick,this._handleDislikeCard=n.handleDislikeCard,this._handleDeleteClick=n.handleDeleteClick,this._userId=t,this._cardSelector=o,this._liked=n.data.likes.some((function(e){return e._id===r._userId}))}var t,o;return t=e,(o=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element__card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._htmlElement=this._getTemplate(),this._elImg=this._htmlElement.querySelector(".element__img"),this._elName=this._htmlElement.querySelector(".element__name"),this._elLike=this._htmlElement.querySelector(".element__like"),this._elBasket=this._htmlElement.querySelector(".element__basket"),this._elLikeNumber=this._htmlElement.querySelector(".element__like-number"),this._elImg.src=this._link,this._elName.innerText=this._name,this._elImg.alt=this._name,this._setEventListeners(),this._checkId(),this._yourCard||this._elBasket.remove(),this._elLikeNumber.innerText=this._cardLikes.length,this._htmlElement}},{key:"_checkId",value:function(){this._userId===this._ownerId._id?this._yourCard=!0:this._yourCard=!1}},{key:"setLikes",value:function(e){this._htmlElement.querySelector(".element__like-number").innerText=e}},{key:"_renderLikeButton",value:function(e){e?this._htmlElement.querySelector(".element__like").classList.add("element__like_active"):this._htmlElement.querySelector(".element__like").classList.remove("element__like_active")}},{key:"getLikes",value:function(e){this._liked=!this._liked,this.setLikes(e.likes.length),this._renderLikeButton(this._liked)}},{key:"_handleLike",value:function(){this._liked?this._handleDislikeCard():this._handleLikeClick()}},{key:"removeCard",value:function(){this._htmlElement.remove(),this._htmlElement=null}},{key:"_setEventListeners",value:function(){var e=this;this._htmlElement.querySelector(".element__like").addEventListener("click",this._handleLike.bind(this)),this._htmlElement.querySelector(".element__basket").addEventListener("click",(function(){e._handleDeleteClick()})),this._htmlElement.querySelector(".element__img").addEventListener("click",(function(){e._handleCardClick({name:e._name,link:e._link})}))}}])&&n(t.prototype,o),e}();function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const i=function(){function e(t,n){var o,r,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(){i._popupForm.addEventListener("submit",(function(e){e.preventDefault(),i._disableAdd()})),i._setEventListeners()},(o="enableValidation")in this?Object.defineProperty(this,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[o]=r,this._popupInputForm=n,this._popupForm=document.querySelector(n),this._popupAboutForm=t.popupAboutForm,this._popupSubmitForm=t.popupSubmitForm,this._popupSubmitInactiveForm=t.popupSubmitInactiveForm,this._popupAboutErrorForm=t.popupAboutErrorForm,this._popupAboutRedLineForm=t.popupAboutRedLineForm,this._inputList=Array.from(this._popupForm.querySelectorAll(this._popupAboutForm)),this._buttonElement=this._popupForm.querySelector(this._popupSubmitForm)}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._popupForm.querySelector("#".concat(e.id,"-error"));e.classList.add(this._popupAboutRedLineForm),n.innerText=t,n.classList.add(this._popupAboutErrorForm)}},{key:"_hideInputError",value:function(e){var t=this._popupForm.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._popupAboutRedLineForm),t.classList.remove(this._popupAboutErrorForm),t.innerText=""}},{key:"_getErrorMessage",value:function(e){return e.validationMessage}},{key:"_checkInputValidity",value:function(e){if(e.validity.valid)this._hideInputError(e);else{var t=this._getErrorMessage(e);this._showInputError(e,t)}}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_disableAdd",value:function(){this._buttonElement.classList.add(this._popupSubmitInactiveForm),this._buttonElement.setAttribute("disabled","true")}},{key:"_disableRemove",value:function(){this._buttonElement.classList.remove(this._popupSubmitInactiveForm),this._buttonElement.removeAttribute("disabled")}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._disableAdd():this._disableRemove()}},{key:"_setEventListeners",value:function(){var e=this;this._toggleButtonState(this._inputList),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState(e._inputList)}))}))}}])&&r(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const u=function(){function e(t,n){var o=t.items,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._items=o,this._selector=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._selector.prepend(e)}}])&&a(t.prototype,n),e}();function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._modalWindow=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"open",value:function(){this._modalWindow.classList.add("popup_is-open"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._modalWindow.classList.remove("popup_is-open"),document.removeEventListener("keyup",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._modalWindow.addEventListener("click",(function(t){(t.target.classList.contains("popup__container")||t.target.classList.contains("popup__close")||t.target===t.currentTarget)&&e.close()}))}}])&&c(t.prototype,n),e}();function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function f(e,t,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(o);if(r){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupPhotoBig=t._modalWindow.querySelector(".popup__photo-big"),t._popupPhotoEdit=t._modalWindow.querySelector(".popup__photo-edit"),t}return t=a,(n=[{key:"open",value:function(e){this._popupPhotoBig.src=e.link,this._popupPhotoBig.alt=e.item,this._popupPhotoEdit.innerText=e.item,f(_(a.prototype),"open",this).call(this)}}])&&p(t.prototype,n),a}(l);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function v(e,t,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(o);if(r){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return g(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._formSubmitHandler=t,n._formForPopup=n._modalWindow.querySelector(".popup__input"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._popupAbout=this._formForPopup.querySelectorAll(".popup__about"),this._popupForm={},this._popupAbout.forEach((function(t){return e._popupForm[t.name]=t.value})),this._popupForm}},{key:"setEventListeners",value:function(){var e=this;this._modalWindow.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmitHandler(e._getInputValues())})),v(S(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){v(S(a.prototype),"close",this).call(this),this._formForPopup.reset()}}])&&b(t.prototype,n),a}(l);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function C(e,t,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(o);if(r){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._formSubmitHandler=t,n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;C(A(a.prototype),"setEventListeners",this).call(this),this._modalWindow.querySelector(".popup__submit").addEventListener("click",(function(t){t.preventDefault(),e._formSubmitHandler()}))}},{key:"setFormSubmitHandler",value:function(e){this._formSubmitHandler=e}}])&&L(t.prototype,n),a}(l);function P(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const T=function(){function e(t){var n=t.name,o=t.about,r=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._occupation=o,this._avatar=r,this._userInfo={}}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.innerText,occupation:this._occupation.innerText}}},{key:"setUserInfo",value:function(e){e.name&&(this._name.innerText=e.name),e.about&&(this._occupation.innerText=e.about),e.avatar&&(this._avatar.src=e.avatar)}}])&&P(t.prototype,n),e}();function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var q,R=new t({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-17",headers:{authorization:"8332b55f-19df-4a02-8ae6-2a849ecc3e1d","Content-Type":"application/json"}}),x={popupInputForm:".popup__input",popupAboutForm:".popup__about",popupSubmitForm:".popup__submit",popupSubmitInactiveForm:"popup__submit_inactive",popupInputName:".popup__input_name",popupInputPhotoCard:".popup__input_photo-card",popupInputNewAvatar:".popup__input_new-avatar",popupAboutErrorForm:"popup__about-error",popupAboutRedLineForm:"popup__about_red-line"},U=document.querySelector(".popup__photo-big-card"),D=document.querySelector(".popup__photo-delete"),N=document.querySelector(".popup__photo-delete_container"),B=document.querySelector(".popup_photo-card"),H=document.querySelector(".popup__submit_photo-card"),W=document.querySelector(".popup_name"),V=document.querySelector(".popup__submit_name"),J=document.querySelector(".popup__about_name"),M=document.querySelector(".popup__about_occupation_name"),G=document.querySelector(".popup__new-avatar"),z=document.querySelector(".popup__submit_new-avatar"),$=document.querySelector(".profile__add-button"),K=document.querySelector(".profile__edit-button"),Q=document.querySelector(".profile__avatar");Promise.all([R.getInitialCards(),R.getUserInfoAbout()]).then((function(e){var t,n,o=(n=3,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(o=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==u.return||u.return()}finally{if(r)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[0],i=o[1],a=o[2];q=i._id,X.setUserInfo(i,a),Y.renderItems(r)})).catch((function(e){console.log("Ошибка при попытке загрузить данные пользователя и карточки: ".concat(e))}));var X=new T({name:document.querySelector(".profile__name"),about:document.querySelector(".profile__occupation"),avatar:document.querySelector(".profile__avatar-img")}),Y=new u({element:[],renderer:function(e){var t=ee(e).generateCard();Y.addItem(t)}},".elements"),Z=new I(D),ee=function(e){var t=new o(q,{data:e,handleCardClick:function(e){ne.open(e)},handleLikeClick:function(){R.addLikeCard(e).then((function(e){t.getLikes(e)})).catch((function(e){return console.log("Ошибка при добавлении лайка: ".concat(e))}))},handleDislikeCard:function(){R.deleteLikeCard(e).then((function(e){t.getLikes(e)})).catch((function(e){return console.log("Ошибка при удалении лайка: ".concat(e))}))},handleDeleteClick:function(){Z.setFormSubmitHandler((function(){N.innerText="Удаление...",R.deleteCard(e).then((function(){Z.close(),N.innerText="Да",t.removeCard()})).catch((function(e){return console.log("Ошибка при удалении карточки: ".concat(e))}))})),Z.setEventListeners(),Z.open()}},".element");return t};new m(U).setEventListeners();var te=new E(B,(function(e){H.innerText="Сохранение...",R.addNewCard({name:e.name,link:e.about}).then((function(e){var t=ee(e).generateCard();H.innerText="Сохранить",te.close(),Y.addItem(t)})).catch((function(e){return console.log("Ошибка при добавлении карточки: ".concat(e))}))}));te.setEventListeners(),$.addEventListener("click",(function(){te.open()}));var ne=new m(U);ne.setEventListeners();var oe=new E(W,(function(e){V.innerText="Сохранение...",R.changeInfo(e).then((function(e){X.setUserInfo({name:e.name,about:e.about}),V.innerText="Сохранить",oe.close()})).catch((function(e){return console.log("Ошибка при изменении данных профиля: ".concat(e))}))}));oe.setEventListeners(),K.addEventListener("click",(function(){var e=X.getUserInfo(),t=e.name,n=e.occupation;J.value=t,M.value=n,oe.open()}));var re=new E(G,(function(e){z.innerText="Сохранение...",R.changeUserAvatar(e).then((function(e){X.setUserInfo({avatar:e.avatar}),z.innerText="Сохранить",re.close()})).catch((function(e){return console.log("Ошибка при изменении аватара: ".concat(e))}))}));re.setEventListeners(),Q.addEventListener("click",(function(){re.open()}));var ie=new i(x,x.popupInputName),ae=new i(x,x.popupInputPhotoCard),ue=new i(x,x.popupInputNewAvatar);ie.enableValidation(),ae.enableValidation(),ue.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,